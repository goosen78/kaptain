\input texinfo   @c -*-texinfo-*-

@c %**start of header
@setfilename kaptain.info
@settitle Kaptain
@dircategory Utilities
@direntry
* Kaptain: (kaptain).           Universal graphical front-end.
@end direntry
@finalout
@c %**end of header

@c @setchapternewpage odd
@c @iftex
@c \input epsf
@c @end iftex

@ifinfo
This is a manual for Kaptain, the Universal Graphical Front-end.

Copyright @copyright{} 2000-2004 Zsolt Ter@'{e}k
@end ifinfo

@titlepage
@title Kaptain
@subtitle Universal Graphical Front-end, version 0.72
@author Zsolt Ter@'{e}k

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2000-2004 Zsolt Ter@'{e}k

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.
@end titlepage

@node    Top, The Concepts of Kaptain, (dir), (dir)
@comment node-name, next,          previous, up

@menu
* The Concepts of Kaptain::     
* Invoking Kaptain::            
* Grammar Scripts::             
* Examples::                    
* External Control::            
* Errors::                      
* Reference of Special Symbols::  
* Reference of Modifiers::      
* Concept Index::               Concept index.
@end menu

@ifhtml
This is a manual for Kaptain, the Universal Graphical Front-end.

Copyright @copyright{} 2000-2004 Zsolt Terék
@end ifhtml

@node    The Concepts of Kaptain, Invoking Kaptain, Top, Top
@comment node-name,     next,          previous, up
@chapter The Concepts of Kaptain

Kaptain is a universal graphical front-end. It was originally developed
in order to provide a simple and efficient tool for creating
dialog-based interface for command line programs. Now, its communication
features allow it to serve the graphical user interface of a program
without directly using a graphical library, such as GTK or Qt.

When Kaptain is started, it reads a so-called grammar script. This is a
text file, which contains a description in a form of a context-free
grammar and optionally some other instructions. This manual refers to
the input file of Kaptain as a @emph{grammar script.} See @ref{Grammar
Scripts} for a complete overview on grammar script syntax.
@cindex Context-free grammar
@cindex Grammar
@cindex Grammar script

According to the grammar script, Kaptain builds a @emph{graphical dialog
box}.  Certain parts of the dialog box are associated with certain
elements of the grammar. This association is quite natural, thats why
Kaptain's language is so easy to learn.
@cindex Dialog box

In the dialog box, several widgets are present. These objects can be
manipulated by the user---text can be entered into input fields,
checkboxes can be set on and off. When a certain push button is pressed,
Kaptain reads the data specified by the user in the dialog box and uses
the context-free grammar to generate text. The generated text is then
executed as a command, just like as if it were entered at the command
prompt.

Suppose we have a program named @code{prog} that runs in two different
modes. For its first mode, an integer parameter should be given, and the
second mode needs some text as parameter. An example for starting
@code{prog} in its first mode: 
@example prog -x 12
@end example
@noindent 
and in second mode 
@example prog -y 'hello' 
@end example
@noindent
Kaptain is a perfect tool for creating a graphical front-end for this
program. First of all, we need to describe the possible command lines
with a grammar.
@example
start -> "prog " parameter ;
parameter -> "-x " @@integer | "-y " @@string ;
@end example

The grammar in the example above is almost enough for Kaptain to build a
dialog containing an integer input box and a string input field, each
having a radio button. Additionally a push button is needed and some
text might be specified in order to label the input fields.

Given a file containing such a description, Kaptain parses the grammar
and builds a dialog box. When the push button is pressed, the text is
generated according to the settings of the user.

The complete grammar for the program above might look like this:
@example
start -> "prog " parameter @@action(start)="Ok";
parameter -> x | y ;
x "First mode" -> "-x " @@integer;
y "Second mode" -> "-y " @@string;
@end example

@c @iftex
@c @tex
@c $$\epsfbox{fig1.eps}$$
@c @end tex
@c According to the settings in the figure, the generated text is
@c @samp{prog -x 0}, since the first radio button is selected.
@c @end iftex

@ifhtml
@html
<IMG SRC="fig1.png"></IMG>
@end html

According to the settings in the figure, the generated text is
@samp{prog -x 0}, since the first radio button is selected.
@end ifhtml

@node Invoking Kaptain, Grammar Scripts, The Concepts of Kaptain, Top
@comment  node-name,  next,  previous,  up
@chapter Invoking Kaptain

Kaptain needs a grammar script in order to display the dialog. This is
usually located in a file, and the name of that file is passed to
Kaptain as an argument. The grammar script can be written to the
standart input of Kaptain, too.

The running mode of Kaptain can be normal or test mode. In test mode,
commands are not executed, they are printed to the standard output
instead.

The command line of Kaptain generally looks like this:
@example
Kaptain @r{[options]} @var{file}
@end example
@noindent If the @var{file} is omitted, the standard input is used as a
source for the input file.

Some options are used to specify running mode, while others set up
different kinds of communication channels for external control. Kaptain
accepts the following switches and parameters:
@table @samp
@c @item --author
@c @itemx --about
@item --version
@cindex Version
Print out the version information of Kaptain end quit.

@item --help
@cindex help
Write a brief help on command line options.

@item --test
@cindex Test mode
Run in test mode. This means that commands are not executed when a
button is pressed, only printed to the standard output.

@item -V
@itemx --verbose
@c @itemx --debug
Report more information on processing the input file. Internal
representation of the grammar and the dialog tree is also printed. Use
this flag if Kaptain does not work as expected.

@item -c @var{host:port}
@itemx --client @var{host:port}
@cindex Client socket
Establish communication channel as a client connecting to a server on
@var{host} listening on @var{port.}

@item -s @var{port}
@itemx --server @var{port}
@cindex Server socket
Listen to the specified @var{port} and accept the first connection. This
will be used as a communication channel.

@item -p @var{command}
@itemx --pipe @var{command}
@cindex Pipe
Start the given command and communicate with it on its standard input
and output. Don't forget to quote @var{command} if it contains spaces or
other metacharacters used by the shell.
 
@item --stdio
@cindex Standard input
Use standard input and output for communication. In this case you must
specify an input file, thus grammar script cannot be read from the
standard input when it is used as a communication channel.

@item --no-input
@cindex No input
Instructs Kaptain not to process messages received on the input channel.

@item --no-output
@cindex No output
If this flag is set, Kaptain will not send any messages on its output
channel.

@end table

These are the possible parameters and options accepted by Kaptain
called from the command prompt.


@node Grammar Scripts, Examples, Invoking Kaptain, Top
@comment  node-name,  next,  previous,  up
@chapter Grammar Scripts

The input file of Kaptain is a grammar script. It contains the
description of a context-free grammar in a form of rules. Beside the
rules, it might also contain so-called descriptions and constraints.

Comments can be placed in grammar scripts. Hashmark (@samp{#}) is a
comment character, which means that all characters after the hashmark up
to the end of the line are ignored together with the hashmark. This is
not true if the hashmark appears inside a quoted string, see
@ref{Quotations}.
@cindex Comments


@menu
* Grammars::                    
* Special symbols::             
* Quotations::                  
* Regulas expressions and translations::  
* Using text manipulation in grammar rules::  
@end menu

@node Grammars, Special symbols, Grammar Scripts, Grammar Scripts
@comment  node-name,  next,  previous,  up
@section Grammars
@cindex Grammars
@cindex Scripts
@cindex Grammar scripts

The program Kaptain reads an input file containing the description in
the form of a context-free grammar. The concept of context-free grammar
is coming form formal linguistic. A grammar is built up of several
rules. Each rule contains a left hand side symbol and some symbols on
the right hand side separated by an arrow:
@example
start -> "progname" options parameters ;
@end example
An interpretation of a rule is the following. The symbol on the left
hand side, which is a @emph{nonterminal symbol} is considered as the
concatenation of the symbols on the right, which can be either
@emph{nonterminal} or @emph{terminal symbols}. In a Kaptain grammar,
symbols are separated by whitespace and rules should end with a
semicolon.

Nonterminal symbols are similar to variables in other programming
languages. Their name can contain alphanumeric characters and
underscore, and should not begin with numbers.
@cindex Nonterminal symbol

Terminal symbols are written between quotation marks. Kaptain has many
ways for specifying terminal symbols, see @ref{Quotations}
@cindex Terminal symbols

The text generation process is an iterated application of rules on the
current sentence. Starting from the nonterminal symbol @samp{start},
every step consists of an application of a rule. This means that a
nonterminal symbol in the current sentence---which is the left hand side
of the applied rule---is replaced by the symbols on right hand side of
the rule. This process ends if there are no more nonterminal symbols in
the current sentence.
@cindex Text generation
@cindex Generating text

To illustrate text generation, let us have the following grammar:
@example
start -> "Your " animal "is " size ;
animal -> "dog " ;
animal -> "cat " ;
size -> "big." ;
size -> "small." ;
@end example

Starting with the sentence @samp{start}, only the first rule can be
applied.  The current sentence is then @samp{"Your " animal "is "
size}. Here both @samp{animal} and @samp{size} is nonterminal,
thus any of the rules but the first can be applied. This way exactly
four different sentences can be generated by this grammar:
@example
Your dog is big.
Your cat is small.
Your dog is big.
Your cat is small.
@end example

As a syntactic simplification, different rules of the same left hand
side can be written in one complex rule using @samp{|} character as a
separator of the different right hand sides. The grammar above is
equivalent to the following:
@example
start -> "Your " animal "is " size ;
animal -> "dog " | "cat " ;
size -> "big." | "small." ;
@end example

The set of sentences that can be generated using a certain grammar is
called the @emph{language} generated by that grammar. @emph{Formal
languages} is a branch of mathematics that deals with languages and
grammars.
@cindex Formal languages
@cindex Language
@cindex Sentence

@menu
* Special symbols::             
@end menu

@node  Special symbols, Quotations, Grammars, Grammar Scripts
@comment  node-name,  next,  previous,  up
@section Special symbols

The expression power of grammars is great. However, sometimes it is
quite comlicated to express simple things. For example, the definition
of numbers is quite long and messy: (Of course, it is possible to write
a different grammar for the numbers, this is not a unique definition.)
@example
number -> digits ;
digits -> digit digits | digit ;
digit -> "0" | "1" | "2" | "3" | "4" 
       | "5" | "6" | "7" | "8" | "9" ;
@end example

Beside terminal and nonterminal symbols, Kaptain offers so-called
@emph{special symbols} to appear in grammars. 
@cindex Special symbol
Special symbols always start with @samp{@@}. Such a symbol almost always
refers to a widget in the dialog. For example @samp{@@integer}
represents a widget, which is a rectangular area where the user can
write a decimal number. The special symbol evaluates to the value that
it contains at the time of the text generation process.

Special symbols may accept different number of parameters and an
optional initial value. The general form is as follows:
@example
@@specname(param_1, param_2, ..., param_n)=initvalue
@end example
If no parameters are given, the parentheses can be omitted. The same
simplification can be applied to the initvalue, what's more, equality
sign must not be written if no initvalue is present. The following forms
are thus enabled:
@example
@@specname
@@specname=initvalue
@@specname(param_1, param_2, ...)
@@specname(param_1, param_2, ...)=initvalue
@end example
@noindent 
Note that the number and type of parameters is not unique, but if
Kaptain cannot interpret a certain parameter in some position, then it
will be simply ignored.

The complete reference of special symbols can be found in
@ref{Reference of Special Symbols}.

@node Quotations, Regulas expressions and translations, Special symbols, Grammar Scripts
@comment  node-name,  next,  previous,  up
@section Quotations
@cindex Quotations
Quotations are the constructions for specifying a literal string, which
is a terminal symbol in the grammar. Kaptain understands a great variety
of quotations in order to make it possible to write character sequences
in the easiest way. The possibble quotations are similar to those of the
language perl and the unix shells.

@table @emph

@item Double quotes
@cindex Double quotes
Strings between double quotes are weakly quoted strings. This means that
some characters are treated as meta-characters. For example, backslash
(\) is an escape-character. The following escape-sequences are
available: @code{\n}, @code{\t}, @code{\"}, @code{\\}. Other characters
are not modified if preceeded by backslash.  This way one can place
double quote character inside a string:
@example
"Double quotes \" are easy to write."
@end example
which stands for 
@example
Double quotes " are easy to write.
@end example

An other meta-character is the dollar sign ($), which is used for
inserting environmental variables into strings. For example in
@code{"$HOME/hello"} the sequence @code{$HELLO} is replaced by the
content of the @code{HELLO} environmental variable. If the environmental
variable name contains other characters than letters, the following form
should be used: @code{$@{ANY89@}}.

This kind of quotation should always end on the same line it was
started. If the end-of-line symbol is reached within the string, Kaptain
prints a warning.

@item Single quotes
@cindex Single quotes
Strings quoted by a single apostrophe are strongly quoted strings. This
means that each character inside the string stands for itself, except
the apostrophe, which always means the ending of the string. There is no
way to include apostrophe in single quoted strings.
@example
'No way to have apostrophes in this string'
@end example
This kind of quotation should always end on the same line it was
started. If the end-of-line symbol is reached within the string, Kaptain
prints a warning.

@item Backquotes
@cindex Backquotes
Strings in backquotes are treated in a special way. Immediately after
the string is parsed, Kaptain executes the given string as a shell
command, and inserts the text it has written to the standard output
instead of the original string. For example, placing @code{`ls`}
evaluates to a string which contains the file names of the current
directory. An easy way to create a list box containing the available
files is the following:
@example
@@list(`ls`)
@end example
Since command @code{ls} returns the files separated by a newline symbol,
@samp{@@list} inserts the different lines of its parameter value as
different list items. @xref{Reference of Special Symbols}.

The commands are passed to @samp{/bin/sh}, so any shell constructions
can be given, e.g., pipes.

Using backquots is a strong form of quoting: there are no special
characters. As a consequence of this, no backquote (`) can appear
inside.

@item Perlish single quotes
@cindex Perlish single quotes
Single quotes are used when no apostrophes appear in the string. Perl
introduced a quotation form where the user chooses the most appropriate
delimiter and any other character can be placed between the delimiters
without modification. The following
@example
q%any characters except the delimiter%
@end example
is evaluated to 
@example
any characters except the delimiter
@end example
and the delimiter character, here @code{%} can be replaced by any
@emph{except} the following: letters, numbers, @code{;().=:_-} and
whitespace.

The letter @samp{q} at the beginning stands for @emph{quotation}.

@item Perlish exection quotes
@cindex Perlish exection quotes
Analogous to the previous generalization of single quotes, perl
generalizes backquotes using the following form:
@example
x%shell command line not containing the delimiter%
@end example
which evaluates to
@example
shell command line not containing the delimiter
@end example
The delimiter can be of the same set as above, and the letter @samp{x}
stands for @emph{execution}.

@item Multiline quotes
@cindex Multiline quotes
A long string spreading on more than one line is usually written using
the line-delimiter construction.

When Kaptain parses two less signs (@code{<<}), the text up to the end of the
line is stored as a delimiter string and it starts to scan a quotation.
The quotation is ended if a line occurs that is exactly same as the
delimiter string.

@example
... <<LINE_DELIMITER
Here goes
the long text
LINE_DELIMITER
@end example
The sample above evaluates to the following two lines:
@example
Here goes
the long text
@end example
The ellipses indicates that the @code{<<} sequence needs not to be on the
beginning of a line. The quotation above is equivalent to the following:
@example
... "Here goes\nthe long text"
@end example


@item 
@end table


@node Regulas expressions and translations, Using text manipulation in grammar rules, Quotations, Grammar Scripts
@comment  node-name,  next,  previous,  up
@section Regulas expressions and translations

@menu
* Regular expressions::         
* Substitutions::               
* Transliterations::            
@end menu

All expressions mentioned here use @code{/} (slash) as bounding
character. This can be replaced by any expect letters, numbers, blanks,
underscore, hyphen and semicolon. But the beginning and the ending
bounding characters must be the same, there is no way to refer to that
character inside the expression. For example, instead of
@code{m/hello/}, one can write @code{m%hello%}, @code{m^hello^}, and so
on.

@node Regular expressions, Substitutions, Regulas expressions and translations, Regulas expressions and translations
@comment  node-name,  next,  previous,  up
@subsection Regular expressions

@cindex Regular expressions
Kaptain understands regular expressions like grep or perl. For a
detailed review, type @code{man grep} or @code{man perlre} at the
command prompt. You can give a regular expression as a parameter to some
special symbols, like this:
@example
@@string(m/$[0-9]*^/, ...
@end example

Here @code{m/$[0-9]*^/} means that the string value in the input line
must @emph{match} the corresponding regular expression. In this
particular case, this means the user can only type integers into the
line input field.

When parentheses are found in the regular expression, a subexpression is
matched which can be referred with @code{\d} where @emph{d} is a
digit. (@code{\1}, @code{\2}, ... @code{\9}) For example:
@example
@@multicol(m/([^[:blank:]]*)[[:blank:]]+([^[:blank:]]*)/, 
          "First_name Last_name",
          "Albert Einstein Dr.", "Isaac Newton", "Rudolf Kepler")
@end example 
@cindex Subexpression
@cindex Regular expression's subexpression
Here the regular expression matches each separate string and the
subexpressions match the first and the second word. In this case, a
twocolumn listview is displayed, each line contains a name. The first
column contains their first name, the second the last name. Note that
the third word @code{"Dr."} in line @code{"Albert Einstein Dr."} is not
matched by the second subexpression, so it is not displayed.


@node Substitutions, Transliterations, Regular expressions, Regulas expressions and translations
@comment  node-name,  next,  previous,  up
@subsection Substitutions

@cindex Substitution
@cindex Regular expression based substitution
Substitution is based on regular expression matching just like in perl
or sed. (For some metacharacters, sed uses different syntax.)
Substitution expression needs a regular expression and a substitution
string as an input:
@example
s/regexp/subs/
@end example

For example, to replace the words "dog" in a text to "cat, just write
@code{s/dog/cat/g}. That @code{g} at the end means that substitution is
repeated until the regular expression cannot match. In the second part,
you can refer to the matched subexpressions by @code{\d}, where @code{d}
is a digit. @code{\0} refers to the whole matched string. Thus the
following swaps the first two words in the text:
@example
s/([^[:blank:]]*)[[:blank:]]+([^[:blank:]]*)/\2 \1/
@end example

You can use it in listbox:
@example
@@list(s/([^[:blank:]]*)[[:blank:]]+([^[:blank:]]*)/\2 \1/,
     "Albert Einstein Dr.", "Isaac Newton", "Rudolf Kepler")
@end example
Here, the names in the listbox will appear in reverse order (this is
common in Hungary) while the selected name will appear in the generated
text in western style.

@node Transliterations,  , Substitutions, Regulas expressions and translations
@comment  node-name,  next,  previous,  up
@subsection Transliterations

@cindex transliteration
Transliteration is a very simple operation which replaces some
characters with some others.
@example
tr/abc/def/
@end example
This replaces @code{a} with @code{d}, @code{b} with @code{e}, @code{c}
with @code{f}.


@node Using text manipulation in grammar rules,  , Regulas expressions and translations, Grammar Scripts
@section  Using text manipulation in grammar rules

If you put some substitution or transliteration expressions on the
beginning of the right side of a rule, those are executed each time when
text is generated with that rule. This means that for
@example
no_jim_and_joe -> s/Jim/Peter/g s/Joe/Peter/g tr/+/-/ @@string;
@end example
If the user writes Jim or Joe into the input box, it is replaced with
Peter, and plus signs are changet to minus when the text is generated.

You can only mention @code{s///} and @code{tr///} operations just after
the arrow of a rule, but any number of such expressions can be written
there. They are executed from right to left, as it is expected naturally
(in my opinion).


@node Examples, External Control, Grammar Scripts, Top
@comment  node-name,  next,  previous,  up
@chapter Examples

@c @ifhtml
@c @html
@c <IMG SRC="fig1.png"></IMG>
@c @end html
@c @end ifhtml

If you write your own grammars, and you think they might be useful for
others, please send them to me @email{terek@@users.sourceforge.net}, I
will put them to the main Kaptain site.

@menu
* Sound recording::             
* Creating archives::           
* Calling perl::                
@end menu

@node Sound recording, Creating archives, Examples, Examples
@section Sound recording

Let's record from the microphone connected to the computer. The command
is
@example
terek@@fido:~$ dd count=5 bs=8 < /dev/audio > myfile.au
@end example
It would be better to see a beautiful dialog. The grammar
@example
#!/usr/local/bin/Kaptain
start:framed -> "dd count=" count " bs=" size "k <" input " > " output ;
count "Number of blocks" -> @@integer=5 ;
size "Size of blocks (k)" -> @@integer=8 ;
input "Input device" -> audio | dsp ;
audio "Audio" -> "/dev/audio" ;
dsp "DSP" -> "/dev/dsp" ;
output "Output file" -> @@outfile("*.au");
@end example

@ifhtml
@html
<IMG SRC="record.gif"></IMG>
@end html
@end ifhtml

@node Creating archives, Calling perl, Sound recording, Examples
@section Creating archives

Here is a simple grammar, just witten in 5 minutes (may contain errors,
check before you try to use it!)
@example
#!/usr/bin/kaptn

start "Tar" -> tar buttons;

tar -> "tar " choice " " opt archive " " files;
opt:framed :horizontal  -> extropt createopt ;

createopt "Write options" -> dump remove verb comp;
extropt "Read options" -> noerr keep same abs;

dump "Dump files, not just symlinks" -> "--dereference " | @@;
noerr"Ignore failed read" -> "--ignore-failed-read " | @@;
keep "Keep existing files" -> "-k " | @@;
same "Extract all protection information" -> "-p " | @@;
abs "Absolute path names" -> "-P " | @@;
remove "Remove files after adding to archive" 
   -> "--remove-files " | @@;
verb "Verbosely list files proceeded" -> "-v " | @@;

comp -> compress | @@;
compress "Compression" -> gzip | bzip;
gzip "gzip" -> "-z ";
bzip "bzip2" -> "--use-compress-program bzip2 ";

choice:framed  -> work;
work "Main choice" -> concat | ! create | diff | del | append 
                     | list | update | extract;
concat "Append to archive" -> "A";
create "Create archive" -> "c";
diff "Find differences between archive and file system" -> "d";
del "Delete from archive" -> "-delete";
append "Append to the end of an archive" -> "r";
list "List contents" -> "t";
update "Update archive" -> "u";
extract "Extract from archive" -> "x";

archive "Archive name" -> @@infile;

files "Files to work with" -> @@string ;

buttons :horizontal -> @@action(tar)="OK" @@close="Cancel";
@end example

@ifhtml
@html
It looks like this:
<IMG SRC="tar.gif"></IMG>
@end html
@end ifhtml
<#if output="html">

This produces a command like
@example
tar c --remove-files --use-compress-program bzip2 files.tar *.cpp *.h
@end example


@node Calling perl,  , Creating archives, Examples
@section Calling perl

Kaptain can generate various texts, such as complicated pipes or a piece
of perl code.  To create your encrpyted password, use the perl command:
@example
print crypt('passwd','sa')."\n";
@end example

Let's make the grammar:

@example
#!/usr/local/bin/Kaptain
start "Password encrypter" -> code @@action("perl","-e",code)="Crypt";
code:framed -> "print crypt('" passw "','" sa q%')."\n"% ;
passw "Password" -> @@string="notsimple";
sa "Random chars(2)" -> @@string(2)="y4";
@end example

Notice that the @code{@@action} has three parameters; the @code{perl}
compiler is called without the shell, having two parameters: @code{-e}
and the evaluated text of @code{code};

@ifhtml
@html
Simple but great:
<IMG SRC="crypt.gif"></IMG>
@end html
@end ifhtml


@node External Control, Errors, Examples, Top
@comment  node-name,  next,  previous,  up
@chapter External Control

@cindex External control
@cindex Communication channels
This chapter describes the communication with the dialog in Kaptain.

The most interesting new feature in Kaptain 0.7 is the possibility of
modifying the data in the widgets while Kaptain is running. For this,
Kaptain needs a communication channel, which can be some network
communicaton, redirection to an other program (using pipes) or the
standard input and output.

On a communication channel Kaptain can recieve messages. There are
two kinds of  messages:

@enumerate

@item Setting message:
@cindex Setting message
This can be sent to rules that contain exactly one special symbol on the
right side. A message consists of two parts: first comes a nonterminal
name, which specifies the target of the message. This should be followed
by a the real message (till the end of that line), which can be in fact
anything that can be written after the special symbol you are refferring
to by the rule.  For example, having a rule like
@example
number -> @@string
@end example
then you can send a message like
@example
number="Hello"
@end example
and the string input field will be set to the given value. 

Thus the general form of a @emph{setting message} is:
@example
nonterminal(par1,par2,...)=initvalue
nonterminal=initvalue
@end example
The later one is the simplified form, i.e., when no parameters are
given. This was the case in the example above.

For a detailed overview of the possible parameters and initial values
for a given type of special symbol, @xref{Reference of Special Symbols}.

@item Asking message: 
@cindex Asking message
If a nonterminal is followed by a question mark in a message sent to
Kaptain on a communication chanel, Kaptain sends back the generated text
by the given nonterminal in the following form:
@example
start?                                          <- to Kaptain
start!<...here comes the generated text...>     <- from kaptin
@end example
This way data can be retrieved at any time from the widgets.

@end enumerate

@node Errors, Reference of Special Symbols, External Control, Top
@comment  node-name,  next,  previous,  up
@chapter Errors

Kaptain reads the given file and parses the grammar according the rules
in @ref{Grammar Scripts}.

If Kaptain finds something that is not according the rules described in
this manual, it either signals an error or just a warning.

For example, warnings are generated if string, regular expressions, or
other language constructs are opened but not closed till the end of the
line. This is often handy when typoes are made in the grammar script.

On the other hand, Kaptain might find syntax error, and it immediately
stops. In this case, the name of the last rule that was read
successfully is printed together with its line number. Thus one has to
look at the errors after the last correct rule. The most usual mistake
is that the closing semicolon is forgotten from the end of a rule.


@node Reference of Special Symbols, Reference of Modifiers, Errors, Top
@comment  node-name,  next,  previous,  up
@chapter Reference of Special Symbols

@table @samp

@item @@integer
@cindex integer
creates an integer input field with up and down arrows, which can be
used to increase or decrease the number in the field. Two integer
parameters are accepted, these are the minimum and maximum
values. Initial value can be an integer, too. For example,
@example 
@@integer(-10,20)=4 
@end example
@noindent will create an integer input which can store a number between 
-10 and 20, and is initially set to 4. The minimum and maximum value
default to 0 and 99, respectively, while the uninitialized field is set
to 0.

This object evaluates to the value of the input field.

@item @@string
@cindex string
makes a one-line input field. If an integer parameter is given, the
maximum length of the string is bounded by that number. For example,
@example 
@@string(20)="Hello" 
@end example
@noindent creates an input field with @samp{Hello} inside, allowing 
strings of at most 20 characters.

This object evaluates to the value of the input field.

@item @@float
@cindex float
makes a line input field than can contain a real number. Initial value
should be given in quotes if it contains other characters than numbers,
for example @code{@@float="1.13"}.

This object evaluates to the value of the input field.

@item @@regexp
@cindex regexp
Similar input field to @code{@@string}, but the regular expression
parameter is used to control the string that is entered. For example,
@code{@@regexp(m/^[ab]*$/)} enables only characters @code{a} and
@code{b} to be entered. Initial string value is processed if it matches
the regular expression.

@item @@password
@cindex password
This is identical to @samp{@@string}, the only difference is that the
characters are not shown; an asterix appears like in usual password
input fields.

@item @@list
@cindex list
@itemx @@combo
@itemx @@combow
These specials generate a list box, a combo box or a writable combo
box, respectively. Each given parameter is inserted into the box if it
is a number or a string. If a multi-line string occurs, every line is
inserted as a separate item. Thus @code{@@list("hello",`ls`,"bye")}
creates a list box containing the files from the current directory, and
two more lines: @samp{hello} and @samp{bye}.

If the given initial value is a number, it indicates which line should
initially be selected. In case of a string, the first occurrence of that
string is highlighted. Finally, if a regular expression is given as an
initial value, the first line matching that regular expression will be
selected.

If a @emph{substitution expression} comes in the parameter list, it is
applied to the following string parameters until a new substitution
parameter is reached. This is useful to make different text in the
dialog box than that appears in the generated text. For example, in
@code{@@list(s/^.*://,"a:A","b:B","c:C")} only the text after the colon
is inserted into the list box, and the whole string is used when the
symbol is evaluated. Note that the initial value selection described in
the previous paragraph is made by comparison to the original strings,
not the modified ones that appear on the screen.

The @code{@@list} and @code{@@combo} objects evaluate to the line from
which the currently selected line was generated using substitutions.
The @code{@@combow} evaluates the line in the combo widget.

@c buttons -------------------------------------------------------------

@item @@button
@cindex button
Places a simple push button with label given as initial value. The label
can be an image, if a filename is given in braces, like
@code{@@button="@{ok.png@}"}.
creates a push button using the given initial value. If the value is in
the form of @code{"@{@var{filename}@}"}, then it is considered to be a
pixmap file, otherwise the initial value is used as a text label. For
example @code{@@button="OK"} creates a simple push button with label
@samp{OK}.

One push button in a dialog can be the default button: This can be
achieved by putting a space to the beginning of its name. For example, a
default ok button is created for the following code: @code{@@button="
OK"}.

@item @@close
@cindex close
Creates a button, which closes the current dialog when pressed.

@item @@action
@cindex action
@emph{Synchronous execution.} When this button is pressed, the given
command is executed. During the execution, the button is disabled.

@item @@fork
@cindex fork
@emph{Asynchronous execution.} When this button is pressed, the given
command is started in the background, without any effect to the dialog.

@item @@exec
@cindex exec
@emph{Final execution.} When this button is pressed, the given command
is started and Kaptain quits immediately.

@item @@execclose
@cindex execclose
This is similar to @samp{@@exec}, the only difference is that Kaptain
only closes the current dialog. In the topmost dialog, this has the same
effect as @samp{@@exec}, since Kaptain quits when it closes the topmost
dialog.

@item @@echo
@cindex echo
Creates a button, which causes the generated text to be printed to the
standard output.

@item @@dump
@cindex dump
Creates a similar button to @samp{@@echo}, but Kaptain quits after
printing the generated text to the standard output.

@itemx @@execbuffer
This button causes the synchronous execution of the given command, when
pressed. The standard output of the executed command is captured and
stored. Later, this symbol evaluates to the stored text. This is the
only button-like special that can evaluate to nonempty text.

@itemx @@preview

Creates a push button, which shows up a new dialog when pressed.  The
new dialog contains the code generated for a given nonterminal.  The
accepted parameters are the following: the nonterminal,font
descriptor(string), minimum width and height (integers) and the closing
button's text.
@example
@@preview(start,"Lucidatypewriter",300,200,"Close")
@end example

@c end buttons ---------------------------------------------------------

@item @@infile
@cindex infile
@itemx @@outfile
@itemx @@directory
These special symbols generate a line input field together with a push
button. When the button is pressed, a file or directory choosing dialog
appears. The name of file selected by the user is then inserted into the
input field. @code{@@infile} stands for a @emph{file open dialog}, while
@code{@@outfile} for @emph{file saving dialog.} Using
@code{@@directory}, one can select an existing @emph{directory.}

The initial value given to these symbols is inserted to the input field
at startup. When the button is pressed, the dialog is starting on the
file/directory currently specified in the input field, if exists.

The file-like specials (@code{@@infile}, @code{@@outfile}) accept one
string argument. It can be a @emph{filter} for the file selection
dialog. An example for a multiple filter is the following:
@example @code{"C++ Files (*.cpp *.cc *.C *.cxx);;Headers (*.h *.hxx)"} 
@end example
The separators between filter groups can be either double semicolons or
newline characters. 

A complete example for @code{@@infile}:
@example @code{@@infile("*.xpm *.png *.gif")="/usr/share/pixmaps"} 
@end example
If no filter is specified, all files can be selected. In case of no
initial value, the current directory is the starting point.

These items evaluate to the text in the input field.

@item @@container
@cindex container
Creates @emph{two buttons} and a @emph{list box}. The first parameter
should be a nonterminal symbol, the following two strings are
interpreted as the labels for the buttons. When the first button is
pressed, the given nonterminal symbol is evaluated, and the generated
text is inserted as a line into the list box.  When the second button is
pressed, the current line is removed from the list box. Button names
default to @samp{Add} and @samp{Remove}.

This object is useful in cases when recursion is needed in the
grammar. (In Kaptain, recursion is forbidden.) For example, if one or
more file name is needed, one can write this:
@example
filename -> @@infile; box -> @@container(filename);
@end example 
The container evaluates to its contents, its lines are simply
concatenated.


@itemx @@multcol
Creates a multi-column table with the given data filled.  If the first
parameter is a regular expression (@code{m/.../}), all the following
string parameters are matched against this expression. Each such string
parameter stands for one line, which is separated according to the
regular expression.The subexpressions matched form the columns of the
given row. If there is no regular expression, the rows are separated at
the tab characters.

The forthcoming string parameters are the rows of the table, except the
first one, which is specially the header. Initial value, if an integer
is given determines the selected element in the table.

The @code{@@multicol} special symbol generates to the content of the
selected row.
@example
@@multicol("Header 1\tHeader 2","data\tdata\tdata","abc")=1;
@@multicol(m/([^ ]+) ([^ ]+) ([^ ]+)/,"1 2 3","a b c",
          "xx yy zz")=0;
@end example


@item @@fill
@cindex fill
Inserts some stretchable space into the dialog. No other functionality,
evaluates to empty string.

@item @@text
@cindex text
This special symbol creates slightly sunken box in the dialog with the
given text inside. The text to be displayed is the concatenation of the
initial value and all the string parameters. Since it has no functions,
it is only good for informing the user.

This object evaluates to the empty string.

@item @@icon
@cindex icon
Displays an image in the dialog. The first parameter should be string,
which is the name of a graphic file. Several file formats are
recognized. From Qt's manual:
@quotation
Qt currently supports the following image file formats: PNG, BMP, XBM,
XPM and PNM. It may also support JPEG, MNG and GIF, if specially
configured during compilation. The different PNM formats are: PBM (P1 or
P4), PGM (P2 or P5), PPM (P3 or P6).
@end quotation

Icons evaluate to empty string.

@item @@edit
@cindex edit
This is a multi-line text editor field. Initial value is inserted, it
can be a multiline text, too.  The first parameter, if it is a string,
is treated as a font name, Kaptain tries to set the editor font. The
next two parameters of integer type can be specified to set the minimum
width and height for the editor field, in pixels. For example,
@code{@@edit("lucidatypewriter",300,200)="Hello,\nEditor!"} creates an
editor field of @math{300x200} pixels, using a nice font.

If the given font name starts with a minus sign, it is treated as an
XLDF (X Logical Font Description). Note that Qt does not handle
wildcards in font descriptions, nor the aliases at this time. A fully
specified font looks like this:
@example -misc-fixed-medium-r-normal--12-120-75-75-c-70-iso8859-2
@end example

@end table


@node Reference of Modifiers, Concept Index, Reference of Special Symbols, Top
@comment  node-name,  next,  previous,  up
@appendix Reference of Modifiers

Modifiers always begin with a colon and are related to the nonterminal
after which they appear.  For example:

@example
start :framed :horizontal -> a b c ;
@end example

means that a, b and c are placed horizontally one by one, and each is in
a frame.

Modifiers usually have effect on the appearence of the dialog.

@table @samp
@item :framed
@cindex framed
Makes the child widgets to appear in a frame.

@item :tabbed
@cindex tabbed
Makes the child widgets to appear on different tabs.

@item :horizontal
@cindex horizontal
Makes the child widgets to appear horizontal one by one, instead of the
default vertical arrangement.

@item :reverse
@cindex reverse
Makes the child widgets to appear in reverse order. That is down to top
if @code{:horizontal} is not present, otherwise right to left.

@item :noeval
@cindex noeval
The nonterminal will evaluate to an empty string. It is useful when you
use a @@string input field by a @@container, and you want to have only
those items which were inserted into the container.

@item :double
@cindex double
Place child elements in two rows or columns. It is useful when you have
many radio buttons.

@item :beside
@cindex beside
Place child elements immediately to the right of the label of this rule
(if it's a radio button or check box), not below as by default.  Use it
in the similar situations as this:
@example
number :beside "Number" -> @@integer | @@ ;
@end example

@item :dialog
@cindex dialog
Create a pushbutton, which if pressed, makes a subdialog to
appear with the right side of the rule.

@item :wizard
@cindex wizard
Create a pushbutton, which stands for a subdialog, having all the
nonterminals from the right side as pages in a so called @emph{Wizard}
dialog (with @emph{Next}, @emph{Back}, @emph{Cancel} and @emph{Finish}
buttons). Must be on a conjunctive rule.

@item :tree
@cindex tree
Places all children in a tree widget. If the children are also marked
with :tree, they will appear on the second level in the tree. Look at
the example grammar for indent. This is a very good way to place a great
amount of structured information in the dialog. Checkboxes and radio
buttons can appear in the tree, but if other things are present, they
will be placed under or beside the QListView object. Use it with :beside
if you want to create things like KControlCenter.  If the label of the
tree item is like @code{@{icons/my.gif@}Text"}, then the picture
mentioned between the braces will be placed beside the Text---this can
be very attractive.

@item :detailed
@cindex detailed
Together with @code{:tree}, it makes a second column appear in the
TreeView where the tooltip information is placed.

@item :stack
@cindex stack
Creates a widget stack, which means all chind widgets of the
corresponding rule are located in the same area, and only one is
visible. To control which one is on the top of the stack (that is,
visible) external communication can be used. @xref{External Control}.

@c internal modifiers DO NOT USE THEM EXPLICITLY
@c @item :checkbox
@c @item :tristate
@c @item :radioparent
@c @item :leftaligned
@c @item :rightaligned
@c @item :radio

@end table

@node    Concept Index,  , Reference of Modifiers, Top
@comment node-name,    next,  previous,      up
@unnumbered Concept Index

@printindex cp

@contents
@bye






